# +
# build/run command(s)
#-

# Create image using this directory's Dockerfile
docker build -t friendlyname .

# Run "friendlyname" mapping port 4000 to 80
docker run -p 4000:80 friendlyname

# Run "friendlyname" mapping port 4000 to 80 as a detached (daemon) process
docker run -d -p 4000:80 friendlyname

# Inspect task or container
docker inspect <task | container>

# +
# container command(s)
#-

# List all running containers
docker container ls

# List all known containers, even those not running
docker container ls -a

# List container IDs
docker container ls -q

# Gracefully stop the specified container
docker container stop <hash>

# Force shutdown of the specified container
docker container kill <hash>

# Remove specified container from this machine
docker container rm <hash>

# Remove all containers
docker container rm $(docker container ls -a -q)

# +
# image command(s)
#-

# List all images on this machine
docker image ls -a

# Remove specified image from this machine
docker image rm <image id>

# Remove all images from this machine
docker image rm $(docker images ls -a -q)

# Show intermediate images
docker images -f "dangling=true" -a -q

# Purge intermediate images
docker image rm $(docker images -f "dangling=true" -a -q)

# +
# repository command(s)
#-

# Log in this CLI session using your Docker credentials
docker login

# Tag <image> for upload to registry
docker tag <image> username/repository:tag

# Upload tagged image to registry
docker push username/repository:tag

# Run image from a registry
docker run username/repository:tag

# +
# service command(s)
#-

# List running services associated with an app
docker service ls

# List tasks associated with an app
docker service ps <service>

# +
# stack command(s)
#-

# List stacks or apps
docker stack ls

# Run the specified Compose file
docker stack deploy -c <composefile> <appname>

# Tear down an application
docker stack rm <appname>

# Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker stack deploy -c <file> <app>

# +
# swarm command(s)
#-

# Initialize
docker swarm init

# Take down a single node swarm from the manager
docker swarm leave --force

# View nodes in swarm (while logged on to manager)
docker node ls


# +
# docker-machine command(s)
#-

# Create a VM (Mac, Win7, Linux)
docker-machine create --driver virtualbox myvm1

# View basic information about your node
docker-machine env myvm1

# List the nodes in your swarm
docker-machine ssh myvm1 "docker node ls"

# Inspect a node
docker-machine ssh myvm1 "docker node inspect <node ID>"

# View join token
docker-machine ssh myvm1 "docker swarm join-token -q worker"

# Open an SSH session with the VM; type "exit" to end
docker-machine ssh myvm1

# Make the worker leave the swarm
docker-machine ssh myvm2 "docker swarm leave"

# Make master leave, kill swarm
docker-machine ssh myvm1 "docker swarm leave -f"

# List VMs, asterisk shows which VM this shell is talking to
docker-machine ls

# Start a VM that is currently not running
docker-machine start myvm1

# show environment variables and command for myvm1
docker-machine env myvm1

# Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine scp docker-compose.yml myvm1:~

# Deploy an app using ssh (you must have first copied the Compose file to myvm1)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"

# Stop all running VMs
docker-machine stop $(docker-machine ls -q)

# Delete all VMs and their disk images
docker-machine rm $(docker-machine ls -q)

# Connect shell to myvm1
eval $(docker-machine env myvm1)

# Disconnect shell from VMs, use native docker
eval $(docker-machine env -u)
